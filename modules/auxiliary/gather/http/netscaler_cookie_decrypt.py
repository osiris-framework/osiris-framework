#!/usr/bin/env python3
# Project: osiris-framework
# Author: Samir Sanchez Garnica @sasaga92
# Version 1.0
# Date: 15/11/2022

from re import search
from core.ModuleObtainer import obtainer
from utilities.Messages import print_message
print_message.name_module = __file__
from utilities.Colors import color

info = {
        'author'            :'Samir Sanchez Garnica',
        'date'              :'2019/05/25',
        'rank'              :'Excellent',
        'path'              :'auxiliary/gather/http/netscaler_cookie_decrypt.py',
        'category'          :'auxiliary',
        'license'           :'GPL-2.0',
        'description'       :'Simple module, which decrypts a cookie generated by Citrix Netscaler',
        'references'        :['https://github.com/catalyst256/Netscaler-Cookie-Decryptor']
}
options = {
            'cookie'                :['Yes', 'use to set cookie decrypt','']
}
required = {
        'start_required'     :'True',
        'check_required'     :'False'
}

def parseCookie(cookie):
    """Parse Citrix NetScaler cookie
    @param cookie: Citrix NetScaler cookie
    @return: Returns ServiceName, ServerIP and ServerPort
    """
    s = search('NSC_([a-zA-Z0-9\-\_\.]*)=[0-9a-f]{8}([0-9a-f]{8}).*([0-9a-f]{4})$',cookie)
    if s is not None:
        servicename = s.group(1) # first group is name ([a-z\-]*)
        serverip = int(s.group(2), 16)
        serverport = int(s.group(3), 16)
    else:
        raise Exception('Could not parse cookie')
    return servicename, serverip, serverport

def decryptServiceName(servicename):
        """Decrypts the Caesar Subsitution Cipher Encryption used on the Netscaler Cookie Name
        @param cookie Citrix NetScaler cookie
        @type cookie: String
        @return: service name
        """
        # This decrypts the Caesar Subsitution Cipher Encryption used on the Netscaler Cookie Name
        trans = bytearray.maketrans(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
                                    b'zabcdefghijklmnopqrstuvwxyZABCDEFGHIJKLMNOPQRSTUVWXY')
        realname = servicename.translate(trans)
        return realname

def decryptServerIP(serverip):
        """Decrypts the XOR encryption used for the Netscaler Server IP
        @param cookie Citrix NetScaler cookie
        @type cookie: String
        @return: XORed server IP based on ipkey
        """
        ipkey = 0x03081e11
        decodedip = hex(serverip ^ ipkey)
        t = decodedip[2:10].zfill(8)
        realip = '.'.join(str(int(i, 16)) for i in ([t[i:i + 2] for i in range(0, len(t), 2)]))
        return realip

def decryptServerPort(serverport):
        """Decrypts the XOR encryption used on the Netscaler Server Port
        @param cookie Citrix NetScaler cookie
        @type cookie: String
        @return: XORed server port
        """
        portkey = 0x3630
        decodedport = serverport ^ portkey  # no need to convert to hex since an integer will do for port
        realport = str(decodedport)
        return realport

def decryptCookie(cookie):
        """Make entire decryption of Citrix NetScaler cookie
        @param cookie: Citrix NetScaler cookie
        @return: Returns RealName, RealIP and RealPort
        """
        servicename, serverip, serverport = parseCookie(cookie)
        realname = decryptServiceName(servicename)
        realip = decryptServerIP(serverip)
        realport = decryptServerPort(serverport)
        return realname, realip, realport

def exploit():
    """ main exploit function """

    try:
        __cookie_encrypt = obtainer.options['cookie'][2]
        try:
            if len(__cookie_encrypt) > 0:
                    print_message.start_execution()
                    __realname, __realip, __realport = decryptCookie(__cookie_encrypt)
                    print(color.color("green","[+] ") + color.color("yellow","ServerName: ") + color.color("lgray", str(__realname)) + color.color("yellow"," ServerIP: ") + color.color("lgray", str(__realip)) + color.color("yellow"," ServerPort: ") + color.color("lgray", str(__realport)))

        except:
                print_message.execution_error("The cookie is incorrect, please try again!")
                return False
    except:
        print_message.execution_error("The cookie is necessary, please try again!")
        return False
    print_message.end_execution()